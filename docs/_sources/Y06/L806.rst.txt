Филтрирање и претраживање
================================

У овој лекцији ћемо видти

1. Како се филтрирају низови употребом посебне Пајтонове конструкције;
2. Како се низови података филтрирају "пешке" и зашто важно да и ову вештину поседујемо; и
3. Како се тражи елемент у низу.

Филтрирање података употребом Пајтонове конструкције
------------------------------------------------------

*Филтрирати податке* значи из датог низа података издвојити оне који су нам на неки начин интересантни.
Програмски језик Пајтон има уграђену конструкцију која омогућује да филтрирамо неки низ података у односу на неки услов.

Филтрирање низа ``L`` у односу на неки услов се може постићи конструкцијом која изгледа овако:

.. code-block:: python

    [x for x in L if Uslov(x)]
    
Ова конструкција у нови низ покупи све елементе ``x`` низа ``L`` који испуњавају ``Uslov``. То је као кад у математици напишемо:

.. math::

  \{x \mid x \in \mathrm{L} \land \mathrm{Uslov}(x) \}

Пример.
''''''''

Из низа бројева ``A = [-1, 2, 3, 0, -3, 4, -2, -5, 3, 0, 6]`` издвојити све позитивне бројеве у нови низ. Потом утврдити колико
низ ``А`` има негативних елемената.

.. activecode:: primer6-1
   
   A = [-1, 2, 3, 0, -3, 4, -2, -5, 3, 0, 6]
   pozitivni = [x for x in A if x > 0]
   negativni = [x for x in A if x < 0]
   print("Pozitivni elementi niza:", pozitivni)
   print("Negativnih ima", len(negativni))
   
Пример.
''''''''

Написати Пајтон функцију која из низа стрингова издваја оне који имају највише пет слова.

.. activecode:: primer6-2

   def max_5_slova(L):
       return [s for s in L if len(s) <= 5]

   # Провера
   niz = ["abrakadabra", "ali", "popokatepetl", "tata", "jabuka", "ja", "biologija", "te", "infomratika", "banana", "volim"]
   print(max_5_slova(niz))

Пример.
''''''''

Ево података о једној групи ученика:

.. code-block:: python

   razred = [["Ana",     "ž", 13, 46, 160],
             ["Bojan",   "m", 14, 52, 165],
             ["Vlada",   "m", 13, 47, 157],
             ["Gordana", "ž", 15, 54, 165],
             ["Dejan",   "m", 15, 56, 163],
             ["Đorđe",   "m", 13, 45, 159],
             ["Elena",   "ž", 14, 49, 161],
             ["Žaklina", "ž", 15, 52, 164],
             ["Zoran",   "m", 15, 57, 167],
             ["Ivana",   "ž", 13, 45, 158],
             ["Jasna",   "ž", 14, 51, 162]]

За сваког ученика је наведено име, пол, старост (у годинама), маса (у килограмима) и висина (у центиметрима).
Издвојити у један низ дечаке, а у други девојчице које имају 13 или 14 година.

.. activecode:: primer6-3

   razred = [["Ana",     "ž", 13, 46, 160],
             ["Bojan",   "m", 14, 52, 165],
             ["Vlada",   "m", 13, 47, 157],
             ["Gordana", "ž", 15, 54, 165],
             ["Dejan",   "m", 15, 56, 163],
             ["Đorđe",   "m", 13, 45, 159],
             ["Elena",   "ž", 14, 49, 161],
             ["Žaklina", "ž", 15, 52, 164],
             ["Zoran",   "m", 15, 57, 167],
             ["Ivana",   "ž", 13, 45, 158],
             ["Jasna",   "ž", 14, 51, 162]]

   print([ucenik for ucenik in razred if ucenik[1] == "m"])
   print([ucenik for ucenik in razred if ucenik[1] == "ž" and (ucenik[2] == 13 or ucenik[2] == 14)])

Филтрирање података "пешке"
---------------------------

Сада ћемо показати како се из низа података могу издвојити елементи који задовољавају неки услов,
али овај пут *без употребе* специјалне Пајтонове конструкције ``[x for x in L if Uslov(x)]``
коју смо користили у претходном одељку.

Идеја је једноставна:

1. направимо нови празан низ који ће бити помоћни низ; он ће временом акумулирати све елементе низа који задовољавају наведени услов;
2. ``for`` циклусом прођемо кроз низ; и
3. елементе који задовољавају наведени услов додамо на помоћни низ.

Пример.
''''''''

Написати Пајтон функцију ``izdvoj_pozitivne`` која из датог низа бројева издваја све позитивне бројеве.

.. activecode:: primer6-4

   def izdvoj_pozitivne(L):
       rez = []
       for x in L:
           if x > 0:
               rez.append(x)
       return rez

   # Провера
   print(izdvoj_pozitivne([3, -1, 2, 4, -6, 0, 5]))
   print(izdvoj_pozitivne([-1, -2, -3]))
   print(izdvoj_pozitivne([]))

Неколико коментара:

1. наредба ``rez = []`` поставља помоћни низ ``rez`` на празан низ, који се означава овако: ``[]``;
2. наредба ``rez.append(x)`` на крај низа ``rez`` додаје ``x`` као нови елемент.

Када филтрирање напишемо "пешке" то нам омогућује да лако решимо неке проблеме које иначе не бисмо брзо и елегантно
могли да решимо употребом уграђене Пајтонове конструкције за филтрирање.

Пример.
'''''''''

Написати Пајтон функцију ``pozicije_pozitivnih`` која за дати низ бројева враћа индексе елемената који су позитивни.

.. activecode:: primer6-5

   def pozicije_pozitivnih(L):
       i = -1
       rez = []
       for x in L:
           i += 1
           if x > 0:
               rez.append(i)
       return rez

   # Провера
   print(pozicije_pozitivnih([3, -1, 2, 4, -6, 0, 5]))
   print(pozicije_pozitivnih([-1, -2, -3]))
   print(pozicije_pozitivnih([]))

Видимо да ова функција комбинује идеју филтрирања и бројач.

1. Прво помоћни низ поставимо на празан низ, а бројач на -1 (зашто?).
2. У сваком пролазу кроз ``for`` циклус увећамо бројач за један и ако је одговарајући елемент низа позивитан
   на крај помоћног низа додамо вредност променљиве ``i``, што је "кућни број" кућице за коју смо управо утврдили да је позитивна.


Тражење елемента у низу
--------------------------


Често је потребно проверити да ли се неки елемент налази у низу, и ако се налази у низу, на ком месту се јавља.
У Пајтону је веома лако проверити да ли се неки елемент налази у низу користећи уграђени оператор ``in``.
Ево примера.

.. activecode:: primer6-6

   A = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
   print(20 in A)
   print(19 in A)

Ако желимо да одредимо где се у низу налази прво појављивање неког елемента написаћемо функцију која то ради за нас.
Функција ``prvo_pojav(x, L)`` тражи прво појављивање елемента ``x`` у низу ``L``. Ако се елемент ``x`` не јавља у низу ``L``
функција враћа -1.

.. activecode:: primer6-7

   def prvo_pojav(x, L):
       i = -1
       for y in L:
           i += 1
           if y == x: return i
       return -1

   # Провера
   B = ["ovo", "ono", "oko", "oro", "era", "rad", "dar", "oko", "era", "ono"]
   print(prvo_pojav("oko", B))
   print(prvo_pojav("iva", B))

Ова функција користи бројач како би знала редни број елемента кога упоређује са ``x``.

1. Прво бројач поставимо на -1 (зашто?).
2. У сваком пролазу кроз ``for`` циклус увећамо бројач за један и ако је одговарајући елемент низа једнак са ``x``
   вратимо вредност бројача, што је позиција првог појављивања елемента ``x`` у низу ``L``.
3. Ако се ``for`` циклус заврши, то значи да нисмо нашли елемент ``x`` у низу ``L`` па функција враћа -1.

Функција ``posl_pojav(x, L)`` тражи последње појављивање елемента ``x`` у низу ``L``.
Ако се елемент ``x`` не јавља у низу ``L`` функција враћа -1.

.. activecode:: primer6-8

   def posl_pojav(x, L):
       i = -1
       n = -1
       for y in L:
           i += 1
           if y == x: n = i
       return n
	
   # Провера
   B = ["ovo", "ono", "oko", "oro", "era", "rad", "dar", "oko", "era", "ono"]
   print(posl_pojav("oko", B))
   print(posl_pojav("rad", B))
   print(posl_pojav("iva", B))

Ова функција користи бројач ``i`` како би знала редни број елемента кога упоређује са ``x``,
као и променљиву ``n`` у којој памти позицију последњег појављивања елемента ``x``
у делу низа кога смо до тог тренутка прегледали.

1. У сваком пролазу кроз ``for`` циклус увећамо бројач за један и ако је одговарајући елемент низа једнак са ``x``
   вредност бројача упишемо у променљиву ``n``.
2. Када се ``for`` циклус заврши променљива ``n`` саржи позицију последњег појављивања елемента ``x`` у низу ``L``,
   што вратимо као резултат рада функције.
3. Ако се елемент ``x`` не појављује у низу ``L`` вредност променљиве ``n`` ће остати -1, па то и вратимо као резултат рада.

Задаци.
-------

**Задатак 1.** Нутритивни подаци за неке рибе и морске плодове су дати у следећој табели:

.. code-block:: text

              Енергетска   Угљени
 Намирница    вредност     хидрати   Беланчевине  Масти
 (100г)       (kcal)       (г)       (г)          (г)
 Туна           116         0        26.0         1.0
 Ослић           88         0        17.2         0.8
 Пастрмка       119         0        18.0         5.0
 Лосос          116         0        20.0         3.5
 Скуша          205         0        19.0        14.0
 Сардине        135         0        18.0         5.0
 Харинга        158         0        18.0         9.0
 Бакалар         82         0        18.0         0.7
 Сом             95         0        16.4         2.8
 Шаран          127         0        17.6         5.6
 Орада          115         0        16.5         5.5
 Јегуља         184         0        18.4        11.7
 Шкампи         106         1        20.0         2.0
 Дагње           86         4        12.0         2.0
 Козице          71         1        13.0         1.0
 Лигње           92         3        15.6         1.3
 Хоботница       81         0        16.4         0.9
 Јастог         112         0        20.0         1.5

Из ове табеле издвој оне намирнице које не садрже угљене хидрате и имају мање од 10 г масти на 100 г намирнице.

.. activecode:: primer6-Z1

   morski_plodovi = [
      ["Туна", 116, 0, 26, 1],
      ["Ослић", 88, 0, 17.2, 0.8],
      ["Пастрмка", 119, 0, 18, 5],
      ["Лосос", 116, 0, 20, 3.5],
      ["Скуша", 205, 0, 19, 14],
      ["Сардине", 135, 0, 18, 5],
      ["Харинга", 158, 0, 18, 9],
      ["Бакалар", 82, 0, 18, 0.7],
      ["Сом", 95, 0, 16.4, 2.8],
      ["Шаран", 127, 0, 17.6, 5.6],
      ["Орада", 115, 0, 16.5, 5.5],
      ["Јегуља", 184, 0, 18.4, 11.7],
      ["Шкампи", 106, 1, 20, 2],
      ["Дагње", 86, 4, 12, 2],
      ["Козице", 71, 1, 13, 1],
      ["Лигње", 92, 3, 15.6, 1.3],
      ["Хоботница", 81, 0, 16.4, 0.9],
      ["Јастог", 112, 0, 20, 1.5]]

   print(???)

**Задатак 2.** Ученици једног разреда су скакали у даљ. Сваки ученик је скакао три пута и резултати су дати у низу испод.
Издвој из табеле оне редове који садрже ученике који су начинили бар један преступ. Преступ је у табели означен тако што је
дужина одговарајућег скока постављена на 0.

.. activecode:: primer6-Z2

   takmicari = [["Алексић Алекса", 4.25, 4.31, 4.22],
                ["Бранковић Бранко", 3.89, 4.02, 4.05],
                ["Вуковић Вук", 0, 3.91, 4.1],
                ["Гавриловић Гаврило", 3.78, 3.26, 3.11],
                ["Дејановић Дејан", 4.56, 4.31, 4.27],
                ["Ђорђевић Ђорђе", 4.63, 4.6, 4.52],
                ["Жарковић Жарко", 3.47, 3.51, 3.58],
                ["Зорић Зоран", 4.12, 4.15, 4.09],
                ["Ивановић Иван", 3.91, 3.26, 0],
                ["Јовановић Јован", 4.01, 4.1, 4.12],
                ["Костић Коста", 3.51, 3.72, 3.41],
                ["Лукић Лука", 2.15, 2.17, 2.18],
                ["Марковић Марко", 3.39, 0, 3.26],
                ["Ненадовић Ненад", 4.25, 4.18, 4.22],
                ["Огњановић Огњен", 4.31, 4.26, 4.12],
                ["Петровић Петар", 4.23, 4.34, 4.34],
                ["Ракић Рака", 3.51, 3.54, 3.62],
                ["Станојевић Станоје", 4.57, 4.59, 4.63]]

   print(???)

**Задатак 3.** У низу испод се налазе подаци о неколико ученика. За сваког ученика је наведено његово презиме, име, ЈМБГ, пол,
разред који похађа и просек на крају тог разреда. Допуни print наредбе тако да добијеш податке који су наведени у коментару
изнад print наредбе.

.. activecode:: primer6-Z3

   podaci = [
       ["Петровић",  "Петар", "0308003800019", "м", 8, 4.52],
       ["Јаснић",    "Јасна", "1210003805026", "ж", 8, 5.00],
       ["Аничић",    "Аница", "1105004805019", "ж", 7, 4.11],
       ["Веснић",    "Весна", "2901005705011", "ж", 6, 5.00],
       ["Ђорђевић",  "Ђорђе", "1504005700012", "м", 6, 3.12],
       ["Милошев",   "Милош", "1506004400056", "м", 7, 2.51],
       ["Милошев",   "Петар", "1506004400057", "м", 7, 2.48],
       ["Ненадовић", "Ненад", "2109003800046", "м", 8, 3.58],
       ["Ненадовић", "Јасна", "2109003805021", "ж", 8, 4.21]]

   # Направи нову табелу коју чине само ученици осмог разреда.
   print(???)
   
   # Направи нову табелу коју чине само врло добри ученици.
   print(???)

   # Направи нову табелу коју чине само дечаци који нису одлични.
   print(???)

**Задатак 4.** Написати функцију ``nadji_sve(x, L)`` која враћа низ са позицијама свих појављивања елемента ``x`` у низу ``L``.

.. activecode:: primer6-Z4

   def nadji_sve(x, L):
       ???

   # Провера
   B = ["ovo", "ono", "oko", "oro", "era", "rad", "dar", "oko", "era", "ono"]
   print(nadji_sve("oko", B))
   print(nadji_sve("rad", B))
   print(nadji_sve("iva", B))

**Задатак 5.** Написати Пајтон функцију ``presek(L, M)`` која враћа низ свих елемената који се јављају и у низу ``L`` и у низу ``M``.

.. activecode:: primer6-Z5

   def presek(L, M):
       ???

   # Провера
   print(presek([3,1,2,3], [2,4,0,5,1]))
   print(presek([1,2,3], [4,5,6]))
   print(presek([1,2,3], []))

**Задатак 6.** Написати Пајтон функцију ``razlika(L, M)`` која враћа низ свих елемената
који се јављају у једном од ова два низа, а не јављају се у другом.

.. activecode:: primer6-Z6

   def presek(L, M):
       ???

   # Провера
   print(razlika([3,1,2,3], [2,4,0,5,1]))
   print(razlika([1,2,3], [4,5,6]))
   print(razlika([1,2,3], []))















